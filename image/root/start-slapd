#!/bin/bash

SLAPD_CONF=/var/openldap-data/${LDAP_DOMAIN}

function shut_down() {
    echo "Shutting down"
    kill -TERM $child 2>/dev/null
}

trap "shut_down" SIGKILL SIGTERM SIGHUP SIGINT EXIT

printf "Starting slapd ... \n";

if [ -z $LDAP_DOMAIN ] ; then
    printf "\n\nLDAP_DOMAIN is not defined!\n"
    exit 1
fi

if [ -z $LDAP_ROOTPW ] ; then
    printf "\n\nLDAP_ROOTPW is not defined!\n"
    exit 1
fi

IFS='.' read -a domain_elems <<< "$LDAP_DOMAIN"

suffix=""
for elem in "${domain_elems[@]}" ; do
    if [ "x$suffix" = x ] ; then 
	suffix="dc=$elem"
    else
	suffix="$suffix,dc=$elem"
    fi
done

printf "SLAPD Config is ${SLAPD_CONF}\n";
printf "root DN is cn=Manager,cn=config\n";
printf "root DN is cn=manager,$suffix\n\n";

#cat <<EOF > /etc/openldap/slapd.conf
#
#include         /etc/openldap/schema/core.schema
#pidfile         /var/run/slapd.pid
#argsfile        /var/run/slapd.args
#database        ldif
#directory       /var/openldap-data
#
#suffix          "$suffix"
#rootdn          "cn=admin,$suffix"
#rootpw          secret
#
#EOF

function update_permissions() { 
    local dir
    dir="$1"
    if [ -d "$dir" ]; then
        [ -z "$SLAPD_USER" ] || chown -R -H "$SLAPD_USER" "$dir"
        [ -z "$SLAPD_GROUP" ] || chgrp -R -H "$SLAPD_GROUP" "$dir"
    fi
}

function create_ldap_directories() {
    mkdir -p /var/run/slapd/
    mkdir -p ${SLAPD_CONF}
    
    update_permissions /var/run/slapd/
    update_permissions ${SLAPD_CONF}
}

function slapadd_ldif_import(){
    local initldif initldifsrc slapaddoption
    initldifsrc="$1"
    slapaddoption="$2"
    initldif=`mktemp -t slapadd.XXXXXX`
    echo "+---------- Import slapadd $initldifsrc - Start ---------------------------"
    echo "Tmp file is $initldif"
    parse_ldap_file $initldifsrc $initldif    
    /usr/sbin/slapadd -d $LAPDTOOLS_DEBUG_LEVEL -F "${SLAPD_CONF}" ${slapaddoption} -l "${initldif}" 
    echo "+---------- Import slapadd $initldifsrc - End ---------------------------"
    #rm -f "${initldif}"    
}


function ldapadd_ldif_import(){
    local initldif initldifsrc
    initldifsrc="$1"
    initldif=`mktemp -t slapadd.XXXXXX`
    echo "+---------- Import ldapadd $initldifsrc - Start ---------------------------"
    echo "Tmp file is $initldif"
    parse_ldap_file $initldifsrc $initldif    
    /usr/bin/ldapadd -d $LAPDTOOLS_DEBUG_LEVEL -H ldap://${HOSTNAME} -D cn=Manager,cn=config -w $LDAP_ROOTPW -f  "${initldif}" 
    echo "+---------- Import ldapadd $initldifsrc - End ---------------------------"
    printf "\n\n\n\n\n";
    #rm -f "${initldif}"    
}

function parse_ldap_file(){
    local ldiffilesrc ldiffile basedn dc backend  ldifincludes
    ldiffilesrc="$1"
    ldiffile="$2"
    echo "----------- Parsed Src $ldiffilesrc - Start ---------------------------"
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    dc="`echo $LDAP_DOMAIN | sed 's/^\.//; s/\..*$//'`"

    #db_get slapd/backend = $LDAP_BACKEND
    backend="`echo $LDAP_BACKEND |tr A-Z a-z`"

    if [ "$backend" = "mdb" ]; then
        backendoptions="olcDbMaxSize: 1073741824"
        backendobjectclass="olcMdbConfig"
    else
        backendoptions="olcDbConfig: set_cachesize 0 2097152 0\nolcDbConfig: set_lk_max_objects 1500\nolcDbConfig: set_lk_max_locks 1500\nolcDbConfig: set_lk_max_lockers 1500"
        if [ "$backend" = "hdb" ]; then
            backendobjectclass="olcHdbConfig"
        else
            backendobjectclass="olcBdbConfig"
        fi
    fi

    
    cat ${ldiffilesrc} > ${ldiffile}

    # Change some defaults
    sed -i -e "s|@BACKEND@|$backend|g" ${ldiffile}
    sed -i -e "s|@BACKENDOBJECTCLASS@|$backendobjectclass|g" ${ldiffile}
    sed -i -e "s|@BACKENDOPTIONS@|$backendoptions|g" ${ldiffile}
    sed -i -e "s|@SUFFIX@|$basedn|g" ${ldiffile}
    sed -i -e "s|@SUFFIXDOMAIN@|$LDAP_DOMAIN|g" ${ldiffile}
    sed -i -e "s|@PASSWORD@|$LDAP_ROOTPW|g" ${ldiffile}
  
    echoDebug "`cat ${ldiffile}`"
    
    echo "----------- Parsed Src $ldiffilesrc - End ---------------------------"
}

function slapadd_additional_ldifs(){    
    if [ -n "$(ls -A /etc/openldap/schema-ldif-includes/*.ldif 2> /dev/null)" ]; then
        echo "------- /etc/openldap/schema-ldif-includes/*.ldif import started"
        for file in `ls /etc/openldap/schema-ldif-includes/*.ldif`
        do
            slapadd_ldif_import "$file" "-b \"cn=config\""
            echo "====> $file imported."
        done
    fi    
    if [ -n "$(ls -A //var/openldap-data/schema-ldif-includes/*.ldif 2> /dev/null)" ]; then
        echo "------- /var/openldap-data/schema-ldif-includes/*.ldif import started"
        for file in `ls /var/openldap-data/schema-ldif-includes/*.ldif`
        do
            slapadd_ldif_import "$file" "-b \"cn=config\""
            echo "====> $file imported."
        done
    fi
}

function echoDebug(){
    msg="$1"
    if [ ! $LAPDTOOLS_DEBUG_LEVEL -eq 0 ]; then
        echo msg
    fi
}

function create_new_directory() {  
    local basedn dc organization initldif
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    dc="`echo $LDAP_DOMAIN | sed 's/^\.//; s/\..*$//'`"

    echo -n "  Creating LDAP directory..."

    initldif=`mktemp -t slapadd.XXXXXX`

    cat <<EOF > "${initldif}"
dn: $basedn
objectClass: top
objectClass: dcObject
objectClass: organization
o: $LDAP_ORGANIZATION
dc: $dc

dn: cn=admin,$basedn
objectClass: simpleSecurityObject
objectClass: organizationalRole
cn: admin
description: LDAP administrator
userPassword: $LDAP_ROOTPW
EOF
    /usr/sbin/slapadd -d $LAPDTOOLS_DEBUG_LEVEL -F "${SLAPD_CONF}" -b "${basedn}" -l "${initldif}"

    #rm -f "${initldif}"
    echo "Create $basedn node done."
}


function slapd_init_ldif(){
    slapadd_ldif_import "/tmp/slapd.init.ldif" "-n 0"
    slapadd_additional_ldifs
    update_permissions "${SLAPD_CONF}"
}

function sldaptest(){
    mkdir /tmp/ldif_output
    slaptest -f /tmp/schema_convert.cfg -F /tmp/ldif_output
    cd '/tmp/ldif_output/cn=config/cn=schema'

    insuffix=", cn=schema, cn=config"

    echo "adding fusion directory's schemas to ldap"

    for file in `ls`
    do
        name=`echo "$file"|cut -d '}' -f 2|cut -d "." -f 1`
        sed s/\{.*\}"$name"/"$name"/ < $file > /tmp/file
        sed s/"dn: cn=$name"/'&'"$insuffix"/ < /tmp/file > /tmp/file_b
        sed /^structuralObjectClass/,//d < /tmp/file_b > $file
        #ldapadd -Y EXTERNAL -H ldapi:/// -f $file
    done
}

function slapd_init_with_replication(){
    slapadd_ldif_import "/tmp/ldap-init-1" "-n 0"
    slapadd_additional_ldifs
    update_permissions "${SLAPD_CONF}"
}


function slapd_init_with_replication_ldapadd(){
    ldapadd_ldif_import "/tmp/ldap-init-2"
    ldapadd_ldif_import "/tmp/ldap-init-3"
}

firsttime=0 
if [ ! -e "${SLAPD_CONF}" ]; then
    printf "First time configuration with slappadd starting...\n";
    firsttime=1
    create_ldap_directories
    slapd_init_with_replication
    #slapd_init_ldif
    create_new_directory
fi

#exec /usr/sbin/slapd -F ${SLAPD_CONF} -h "ldap://localhost:389/ ldaps:///" -u ${SLAPD_USER} -g ${SLAPD_GROUP} -d 0 &
exec /usr/sbin/slapd -F ${SLAPD_CONF} -u ${SLAPD_USER} -g ${SLAPD_GROUP} -d ${SLAPD_DEBUG_LEVEL} &

child=$!

printf "Slapd started... \n";

sleep 2

if [ $firsttime -eq 1 ]; then
    printf "First time after start configuration with ldpaadd starting\n";
    slapd_init_with_replication_ldapadd
fi

wait $child
