#!/bin/bash

SLAPD_CONF=/var/openldap-data/${LDAP_DOMAIN}

function shut_down() {
    echo "Shutting down"
    kill -TERM $child 2>/dev/null
}

trap "shut_down" SIGKILL SIGTERM SIGHUP SIGINT EXIT

printf "Starting slapd ... \n";

function prepare_slapd_conf() {
    local basedn rootdn rootconfigdn
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    rootdn="cn=${LDAP_ROOT},$basedn"
    rootconfigdn="cn=${LDAP_ROOT},cn=config"
    sed -i "s/^suffix.*$/suffix\t\t\"$basedn\"/g" /etc/openldap/slapd.conf
    sed -i "s/^rootdn.*$/rootdn\t\t\"$rootconfigdn\"/g" /etc/openldap/slapd.conf
    sed -i "s/^rootpw.*$/rootpw\t\t\"${LDAP_ROOTPW}\"/g" /etc/openldap/slapd.conf
    printf "root DN in config is $rootconfigdn\n";
    printf "root DN is $rootdn\n";
}

if [ -z $LDAP_DOMAIN ] ; then
    printf "\n\nLDAP_DOMAIN is not defined!\n"
    exit 1
fi

if [ -z $LDAP_ROOTPW ] ; then
    printf "\n\nLDAP_ROOTPW is not defined!\n"
    exit 1
fi

IFS='.' read -a domain_elems <<< "$LDAP_DOMAIN"

suffix=""
for elem in "${domain_elems[@]}" ; do
    if [ "x$suffix" = x ] ; then
	suffix="dc=$elem"
    else
	suffix="$suffix,dc=$elem"
    fi
done

printf "SLAPD Config is ${SLAPD_CONF}\n";

#cat <<EOF > /etc/openldap/slapd.conf
#
#include         /etc/openldap/schema/core.schema
#pidfile         /var/run/slapd.pid
#argsfile        /var/run/slapd.args
#database        ldif
#directory       /var/openldap-data
#
#suffix          "$suffix"
#rootdn          "cn=admin,$suffix"
#rootpw          secret
#
#EOF

function update_permissions() {
    local dir
    dir="$1"
    if [ -d "$dir" ]; then
        [ -z "$SLAPD_USER" ] || chown -R -H "$SLAPD_USER" "$dir"
        [ -z "$SLAPD_GROUP" ] || chgrp -R -H "$SLAPD_GROUP" "$dir"
    fi
}

function create_ldap_directories() {
    mkdir -p /var/run/slapd/
    mkdir -p ${SLAPD_CONF}

    update_permissions /var/run/slapd/
    update_permissions ${SLAPD_CONF}
}

function slapadd_ldif_import(){
    local initldif initldifsrc slapaddoption
    initldifsrc="$1"
    slapaddoption="$2"
    initldif=`mktemp -t slapadd.XXXXXX`
    echo "+---------- Import slapadd $initldifsrc - Start ---------------------------"
    echo "-- Tmp file is $initldif"
    parse_ldap_file $initldifsrc $initldif
    echo "/usr/sbin/slapadd -d $LAPDTOOLS_DEBUG_LEVEL -F \"${SLAPD_CONF}\" ${slapaddoption} -l \"${initldif}\""
    /usr/sbin/slapadd -d $LAPDTOOLS_DEBUG_LEVEL -F "${SLAPD_CONF}" ${slapaddoption} -l "${initldif}"
    echo "+---------- Import slapadd $initldifsrc - End ---------------------------"
    #rm -f "${initldif}"
}


function ldapadd_ldif_import(){
    local initldif initldifsrc binddn
    initldifsrc="$1"
    binddn="$2"
    initldif=`mktemp -t ldapadd.XXXXXX`
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    echo "+---------- Import ldapadd $initldifsrc - Start ---------------------------"
    echo "-- Tmp file is $initldif"
    parse_ldap_file $initldifsrc $initldif
    echo "/usr/bin/ldapadd -d $LAPDTOOLS_DEBUG_LEVEL -H ldap://localhost:389 -D \"$binddn\" -w $LDAP_ROOTPW -f  \"${initldif}\""
    /usr/bin/ldapadd -d $LAPDTOOLS_DEBUG_LEVEL -H ldap://localhost:389 -D "$binddn" -w $LDAP_ROOTPW -f  "${initldif}"
    echo "+---------- Import ldapadd $initldifsrc - End ---------------------------"
    #rm -f "${initldif}"
}

function ldapmodify_ldif_import(){
    local initldif initldifsrc binddn
    initldifsrc="$1"
    binddn="$2"
    initldif=`mktemp -t ldapmodify.XXXXXX`
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    echo "+---------- Import ldapmodify $initldifsrc - Start ---------------------------"
    echo "-- Tmp file is $initldif"
    parse_ldap_file $initldifsrc $initldif
    echo "/usr/bin/ldapmodify -d $LAPDTOOLS_DEBUG_LEVEL -H ldap://localhost:389 -D \"$binddn\" -w $LDAP_ROOTPW -f  \"${initldif}\""
    /usr/bin/ldapmodify -d $LAPDTOOLS_DEBUG_LEVEL -H ldap://localhost:389 -D "$binddn" -w $LDAP_ROOTPW -f  "${initldif}"
    echo "+---------- Import ldapmodify $initldifsrc - End ---------------------------"
    #rm -f "${initldif}"
}

function parse_ldap_file(){
    local ldiffilesrc ldiffile basedn rootdn rootconfigdn dc backend  ldifincludes
    ldiffilesrc="$1"
    ldiffile="$2"
    echo "----------- Parsed Src $ldiffilesrc - Start ---------------------------"
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    dc="`echo $LDAP_DOMAIN | sed 's/^\.//; s/\..*$//'`"
    rootdn="cn=${LDAP_ROOT},$basedn"
    rootconfigdn="cn=${LDAP_ROOT},cn=config"

    #db_get slapd/backend = $LDAP_BACKEND
    backend="`echo $LDAP_BACKEND |tr A-Z a-z`"

    if [ "$backend" = "mdb" ]; then
        backendoptions="olcDbMaxSize: 1073741824"
        backendobjectclass="olcMdbConfig"
    else
        backendoptions="olcDbConfig: set_cachesize 0 2097152 0\nolcDbConfig: set_lk_max_objects 1500\nolcDbConfig: set_lk_max_locks 1500\nolcDbConfig: set_lk_max_lockers 1500"
        if [ "$backend" = "hdb" ]; then
            backendobjectclass="olcHdbConfig"
        else
            backendobjectclass="olcBdbConfig"
        fi
    fi

    cat ${ldiffilesrc} > ${ldiffile}

    # Change some defaults
    sed -i -e "s|@BACKEND@|$backend|g" ${ldiffile}
    sed -i -e "s|@BACKENDOBJECTCLASS@|$backendobjectclass|g" ${ldiffile}
    sed -i -e "s|@BACKENDOPTIONS@|$backendoptions|g" ${ldiffile}
    sed -i -e "s|@SUFFIX@|$basedn|g" ${ldiffile}
    sed -i -e "s|@SUFFIXDOMAIN@|$LDAP_DOMAIN|g" ${ldiffile}
    sed -i -e "s|@DOMAINCOMPONENT@|$dc|g" ${ldiffile}
    sed -i -e "s|@ORGANIZATION@|$LDAP_ORGANIZATION|g" ${ldiffile}
    sed -i -e "s|@PASSWORD@|$LDAP_ROOTPW|g" ${ldiffile}
    sed -i -e "s|@LDAPROOT@|$LDAP_ROOT|g" ${ldiffile}
    sed -i -e "s|@ROOTDN@|$rootdn|g" ${ldiffile}
    sed -i -e "s|@ROOTCONFIGDN@|$rootconfigdn|g" ${ldiffile}
    sed -i -e "s|@REPLICATORPW@|$LDAP_REPLICATOR_PW|g" ${ldiffile}
    sed -i -e "s|@MASTERPW@|$LDAP_MASTER_PW|g" ${ldiffile}
    sed -i -e "s|@REPLICATION_PROVIDER_URL@|$REPLICATION_PROVIDER_URL|g" ${ldiffile}

    echo "----------- Parsed Src $ldiffilesrc - End ---------------------------"
}

function slapadd_additional_ldifs_level_0(){
    local location
    for location in "/etc/openldap/schema-ldif-includes/*.ldif" "/var/openldap-data/schema-ldif-includes/*.ldif"; do
        if [ -n "$(ls -A $location 2> /dev/null)" ]; then
            echo "------- $location import started"
            for file in `ls $location`
            do
                slapadd_ldif_import "$file" "-n 0"
                echo "====> $file imported."
            done
        fi
    done 
}

function slapadd_additional_ldifs_level_2(){
    local location
    for location in "/etc/openldap/ldif-imports/*.ldif" "/var/openldap-data/ldif-imports/*.ldif"; do
        if [ -n "$(ls -A $location 2> /dev/null)" ]; then
            echo "------- $location import started"
            for file in `ls $location`
            do
                if ! grep -q "^changetype\s*:\s*modify$" $file; then
                    echo "====> Slappadd $file imported(ldapadd)."
                    slapadd_ldif_import "$file" "-n 2"
                fi
            done
        fi
    done 
}

function ldap_additional_ldifs_import(){
    local binddn location
    binddn="$1"
    for location in "/etc/openldap/ldif-imports/*.ldif" "/etc/openldap/ldif-imports/*.ldif"; do
        if [ -n "$(ls -A $location 2> /dev/null)" ]; then
            echo "------- $location import started"
            for file in `ls $location`
            do
                if grep -q "^changetype\s*:\s*modify$" $file; then
                    echo "====> Modify $file imported(ldapmodify)."
                    ldapmodify_ldif_import "$file" "$binddn"
                else
                    echo "====> Add $file imported(ldapadd)."
                    ldapadd_ldif_import "$file" "$binddn"
                    #slapadd_ldif_import "$file" "-n 2"
                fi
            done
        fi
    done 
}

function echoDebug(){
    msg="$1"
    if [ ! $LAPDTOOLS_DEBUG_LEVEL -eq 0 ]; then
        echo $msg
    fi
}

function create_new_directory() {
    local basedn dc organization ldiffile rootdn rootconfigdn
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    dc="`echo $LDAP_DOMAIN | sed 's/^\.//; s/\..*$//'`"
    rootdn="cn=${LDAP_ROOT},$basedn"
    rootconfigdn="cn=${LDAP_ROOT},cn=config"

    echo -n "  Creating LDAP directory..."

    ldiffile=`mktemp -t ldapbase.XXXXXX`

    parse_ldap_file "/tmp/ldap-base" $ldiffile

    /usr/sbin/slapadd -d $LAPDTOOLS_DEBUG_LEVEL -F "${SLAPD_CONF}" -b "${basedn}" -l "${ldiffile}"

    #rm -f "${ldiffile}"
    echo "Create $basedn node done."
}


function slapd_init_ldif(){
    slapadd_ldif_import "/tmp/slapd.init.ldif" "-n 0"
    slapadd_additional_ldifs
    update_permissions "${SLAPD_CONF}"
}

function sldaptest(){
    mkdir /tmp/ldif_output
    slaptest -f /tmp/schema_convert.cfg -F /tmp/ldif_output
    cd '/tmp/ldif_output/cn=config/cn=schema'

    insuffix=", cn=schema, cn=config"

    echo "adding fusion directory's schemas to ldap"

    for file in `ls`
    do
        name=`echo "$file"|cut -d '}' -f 2|cut -d "." -f 1`
        sed s/\{.*\}"$name"/"$name"/ < $file > /tmp/file
        sed s/"dn: cn=$name"/'&'"$insuffix"/ < /tmp/file > /tmp/file_b
        sed /^structuralObjectClass/,//d < /tmp/file_b > $file
        #ldapadd -Y EXTERNAL -H ldapi:/// -f $file
    done
}

function slapd_init_with_replication(){
    slapadd_ldif_import "/tmp/ldap-init-replica-enabled-server" "-n 0"
    update_permissions "${SLAPD_CONF}"
}


function slapd_init_as_master(){
    local basedn
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    #ldapadd_ldif_import "/tmp/ldap-init-replica-master" "cn=Manager,cn=config"
    #ldapadd_ldif_import "/tmp/ldap-init-replicator-base" "cn=Manager,cn=config"
    slapadd_ldif_import "/tmp/ldap-init-replica-master" "-n 2"
    slapadd_ldif_import "/tmp/ldap-init-replicator-base" "-n 2"
}

function slapd_init_as_slave(){
    local basedn
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    ldapmodify_ldif_import "/tmp/ldap-init-replica-cunsumer" "cn=Manager,cn=config"
}
########################################
## Main of script
########################################
firsttime=0
if [ ! -e "${SLAPD_CONF}" ]; then
    printf "First time configuration with slappadd starting...\n";
    basedn="dc=`echo $LDAP_DOMAIN | sed 's/^\.//; s/\.$//; s/\./,dc=/g'`"
    firsttime=1
    prepare_slapd_conf
    create_ldap_directories
    slapd_init_with_replication
    slapadd_additional_ldifs_level_0
    create_new_directory
    slapadd_additional_ldifs_level_2
    if [ "$LDAP_IS_MASTER" == "true" ]; then
        slapd_init_as_master
    else 
        if [ -n "$REPLICATION_PROVIDER_SERVER_NAME" ]; then
            #slapd_init_as_slave
            echo ""
        fi
    fi
fi

#exec /usr/sbin/slapd -F ${SLAPD_CONF} -h "ldap://localhost:389/ ldaps:///" -u ${SLAPD_USER} -g ${SLAPD_GROUP} -d 0 &
exec /usr/sbin/slapd -F ${SLAPD_CONF} -u ${SLAPD_USER} -g ${SLAPD_GROUP} -d ${SLAPD_DEBUG_LEVEL} &

child=$!

printf "\n\nSlapd started... \n\n\n";

sleep 2

while [ ! -f /tmp/run/slapd.pid ]
do
    echo -e "witing to slapd starting up ..."
    sleep 1
done

if [ $firsttime -eq 1 ]; then
    ldap_additional_ldifs_import "cn=Manager,cn=config"
    if [ "$LDAP_IS_MASTER" == "true" ]; then
        #slapd_init_as_master
        echo ""
    else 
        if [ -n "$REPLICATION_PROVIDER_SERVER_NAME" ]; then
            slapd_init_as_slave
        fi
    fi
fi

if [ "$LDAP_IS_MASTER" == "true" ]; then
     echo -e "\n\n\nLDAP Server is replication master:"
else 
    if [ -n "$REPLICATION_PROVIDER_SERVER_NAME" ]; then
        echo -e "\n\n\nLDAP Server is replication slave:"
    else
        echo -e "\n\n\nLDAP Server is with no replication:"
    fi
fi

echo -e "\tLDAP_IS_MASTER is set to '$LDAP_IS_MASTER'"
echo -e "\tREPLICATION_PROVIDER_SERVER_NAME is set to '$REPLICATION_PROVIDER_SERVER_NAME'"
echo -e "\tREPLICATION_PROVIDER_URL is set to '$REPLICATION_PROVIDER_URL'\n\n"

wait $child
